#!/usr/bin/env swift

import Foundation

// This example demonstrates comprehensive usage of the new robust mapping system
// for the SheetMusicScroller project

// Includes the core models for demonstration
enum NoteDuration: Double, CaseIterable {
    case whole = 4.0, half = 2.0, quarter = 1.0, eighth = 0.5, sixteenth = 0.25, thirtySecond = 0.125
    
    var beats: Double { rawValue }
    func duration(at tempo: Double) -> Double { (60.0 / tempo) * beats }
}

enum Clef: String, CaseIterable {
    case treble, bass, alto, tenor
    
    var middleLineMidiNote: Int {
        switch self {
        case .treble: return 71; case .bass: return 50; case .alto: return 60; case .tenor: return 57
        }
    }
}

struct MusicContext {
    let keySignature: String
    let clef: Clef
    let tempo: Double
    let a4Reference: Double
    
    init(keySignature: String, clef: Clef = .treble, tempo: Double = 120, a4Reference: Double = 440.0) {
        self.keySignature = keySignature; self.clef = clef; self.tempo = tempo; self.a4Reference = a4Reference
    }
}

class StaffPositionMapper {
    static func noteNameToMidiNote(_ noteName: String) -> Int {
        guard noteName.count >= 2 else { return 60 }
        
        let noteString = String(noteName.dropLast())
        let octaveString = String(noteName.suffix(1))
        guard let octave = Int(octaveString) else { return 60 }
        
        let noteMap: [String: Int] = [
            "C": 0, "C#": 1, "Db": 1, "D": 2, "D#": 3, "Eb": 3, "E": 4,
            "F": 5, "F#": 6, "Gb": 6, "G": 7, "G#": 8, "Ab": 8,
            "A": 9, "A#": 10, "Bb": 10, "B": 11
        ]
        
        guard let noteIndex = noteMap[noteString] else { return 60 }
        return (octave + 1) * 12 + noteIndex
    }
    
    static func frequencyToStaffPosition(_ frequency: Double, context: MusicContext) -> Double {
        guard frequency > 0 else { return 0.0 }
        let midiNote = 69 + 12 * log2(frequency / context.a4Reference)
        return midiNoteToStaffPosition(midiNote, clef: context.clef)
    }
    
    static func noteNameToStaffPosition(_ noteName: String, context: MusicContext) -> Double {
        let midiNote = noteNameToMidiNote(noteName)
        return midiNoteToStaffPosition(Double(midiNote), clef: context.clef)
    }
    
    static func midiNoteToStaffPosition(_ midiNote: Double, clef: Clef) -> Double {
        let middleLineMidi = Double(clef.middleLineMidiNote)
        let chromaticDifference = midiNote - middleLineMidi
        return -chromaticDifference * (7.0 / 12.0) * 0.5
    }
    
    static func getAccidentalDisplay(for noteName: String, in keySignature: String) -> String {
        if noteName.contains("#") { return "â™¯" }
        else if noteName.contains("b") { return "â™­" }
        return ""
    }
    
    static func getLedgerLinesCount(for position: Double) -> Int {
        let absPosition = abs(position)
        return absPosition > 4.0 ? Int((absPosition - 4.0) / 2.0) + 1 : 0
    }
    
    static func getLedgerLinePositions(for position: Double) -> [Double] {
        var positions: [Double] = []
        if position > 4.0 {
            var ledgerPos = 6.0
            while ledgerPos <= position + 1.0 { positions.append(ledgerPos); ledgerPos += 2.0 }
        } else if position < -4.0 {
            var ledgerPos = -6.0
            while ledgerPos >= position - 1.0 { positions.append(ledgerPos); ledgerPos -= 2.0 }
        }
        return positions
    }
}

struct Note {
    let noteName: String
    let noteValue: NoteDuration
    let a4Reference: Double
    let keySignature: String
    
    init(noteName: String, noteValue: NoteDuration, a4Reference: Double = 440.0, keySignature: String = "C major") {
        self.noteName = noteName; self.noteValue = noteValue; self.a4Reference = a4Reference; self.keySignature = keySignature
    }
    
    var frequency: Double {
        let midiNote = StaffPositionMapper.noteNameToMidiNote(noteName)
        return a4Reference * pow(2.0, Double(midiNote - 69) / 12.0)
    }
    
    static func quarter(_ noteName: String, a4Reference: Double = 440.0, keySignature: String = "C major") -> Note {
        return Note(noteName: noteName, noteValue: .quarter, a4Reference: a4Reference, keySignature: keySignature)
    }
    
    static func eighth(_ noteName: String, a4Reference: Double = 440.0, keySignature: String = "C major") -> Note {
        return Note(noteName: noteName, noteValue: .eighth, a4Reference: a4Reference, keySignature: keySignature)
    }
    
    static func sixteenth(_ noteName: String, a4Reference: Double = 440.0, keySignature: String = "C major") -> Note {
        return Note(noteName: noteName, noteValue: .sixteenth, a4Reference: a4Reference, keySignature: keySignature)
    }
}

struct TimedNote {
    let note: Note
    let startTime: Double
    
    init(note: Note, startTime: Double) {
        self.note = note; self.startTime = startTime
    }
    
    func duration(in context: MusicContext) -> Double {
        return note.noteValue.duration(at: context.tempo)
    }
    
    func staffPosition(in context: MusicContext) -> Double {
        return StaffPositionMapper.noteNameToStaffPosition(note.noteName, context: context)
    }
    
    func accidentalDisplay(in context: MusicContext) -> String {
        return StaffPositionMapper.getAccidentalDisplay(for: note.noteName, in: context.keySignature)
    }
}

struct SheetMusic {
    let title: String
    let composer: String
    let musicContext: MusicContext
    let timeSignature: String
    let timedNotes: [TimedNote]
    
    init(title: String, composer: String, musicContext: MusicContext, timeSignature: String, timedNotes: [TimedNote]) {
        self.title = title; self.composer = composer; self.musicContext = musicContext
        self.timeSignature = timeSignature; self.timedNotes = timedNotes
    }
    
    init(title: String, composer: String, keySignature: String, clef: Clef = .treble, tempo: Double = 120, timeSignature: String, timedNotes: [TimedNote], a4Reference: Double = 440.0) {
        let context = MusicContext(keySignature: keySignature, clef: clef, tempo: tempo, a4Reference: a4Reference)
        self.init(title: title, composer: composer, musicContext: context, timeSignature: timeSignature, timedNotes: timedNotes)
    }
}

// Helper function for string repetition
func repeatString(_ string: String, count: Int) -> String {
    return String(repeating: string, count: count)
}

print("ðŸŽ¼ SheetMusicScroller - Complete Usage Examples")
print(repeatString("=", count: 60))

print("\nðŸ“‹ EXAMPLE 1: Creating Notes with Different Contexts")
print(repeatString("-", count: 50))

// Example 1: Creating immutable notes
let standardNote = Note.quarter("A4")  // Standard A440 tuning
let historicalNote = Note.quarter("A4", a4Reference: 415.0, keySignature: "G major")  // Baroque tuning
let modernNote = Note.quarter("A4", a4Reference: 442.0, keySignature: "F# major")  // Modern high tuning

print("Standard note:    \(standardNote.noteName) = \(String(format: "%.1f", standardNote.frequency)) Hz")
print("Historical note:  \(historicalNote.noteName) = \(String(format: "%.1f", historicalNote.frequency)) Hz")
print("Modern note:      \(modernNote.noteName) = \(String(format: "%.1f", modernNote.frequency)) Hz")

print("\nðŸ“‹ EXAMPLE 2: Multi-Clef Composition")
print(repeatString("-", count: 50))

// Example 2: Creating music for different clefs
let pianoTreble = MusicContext(keySignature: "C major", clef: .treble, tempo: 120)
let pianoBass = MusicContext(keySignature: "C major", clef: .bass, tempo: 120)

let trebleNotes = [
    TimedNote(note: Note.quarter("C5"), startTime: 0.0),
    TimedNote(note: Note.quarter("E5"), startTime: 0.5),
    TimedNote(note: Note.quarter("G5"), startTime: 1.0)
]

let bassNotes = [
    TimedNote(note: Note.quarter("C3"), startTime: 0.0),
    TimedNote(note: Note.quarter("E3"), startTime: 0.5),
    TimedNote(note: Note.quarter("G3"), startTime: 1.0)
]

let trebleStaff = SheetMusic(title: "Piano Right Hand", composer: "Example", musicContext: pianoTreble, timeSignature: "4/4", timedNotes: trebleNotes)
let bassStaff = SheetMusic(title: "Piano Left Hand", composer: "Example", musicContext: pianoBass, timeSignature: "4/4", timedNotes: bassNotes)

print("Treble staff positions:")
for (i, timedNote) in trebleStaff.timedNotes.enumerated() {
    let pos = timedNote.staffPosition(in: trebleStaff.musicContext)
    print("  \(i+1). \(timedNote.note.noteName): position \(String(format: "%.1f", pos))")
}

print("Bass staff positions:")
for (i, timedNote) in bassStaff.timedNotes.enumerated() {
    let pos = timedNote.staffPosition(in: bassStaff.musicContext)
    print("  \(i+1). \(timedNote.note.noteName): position \(String(format: "%.1f", pos))")
}

print("\nðŸ“‹ EXAMPLE 3: Extended Range with Ledger Lines")
print(repeatString("-", count: 50))

// Example 3: Extreme ranges requiring ledger lines
let extremeRange: [(String, String, Clef)] = [
    ("Piano lowest", "A0", .treble),
    ("Piano highest", "C8", .treble),
    ("Double bass low", "E1", .bass),
    ("Piccolo high", "C8", .treble),
    ("Viola range", "C3", .alto)
]

print("Extreme note positions and ledger line requirements:")
for (instrument, noteName, clef) in extremeRange {
    let context = MusicContext(keySignature: "C major", clef: clef)
    let position = StaffPositionMapper.noteNameToStaffPosition(noteName, context: context)
    let ledgerCount = StaffPositionMapper.getLedgerLinesCount(for: position)
    let ledgerPositions = StaffPositionMapper.getLedgerLinePositions(for: position)
    
    print("  \(instrument.padding(toLength: 15, withPad: " ", startingAt: 0)): \(noteName) in \(clef.rawValue) clef")
    print("    Position: \(String(format: "%+.1f", position)), Ledger lines: \(ledgerCount)")
    if !ledgerPositions.isEmpty {
        let positions = ledgerPositions.map { String(format: "%.1f", $0) }.joined(separator: ", ")
        print("    Ledger positions: [\(positions)]")
    }
}

print("\nðŸ“‹ EXAMPLE 4: Frequency Analysis and Mapping")
print(repeatString("-", count: 50))

// Example 4: Real-time frequency mapping (simulating pitch detection)
let frequencies = [82.4, 164.8, 329.6, 659.3, 1318.5]  // E notes across octaves
let context = MusicContext(keySignature: "E major", clef: .treble)

print("Simulated real-time frequency detection:")
for (i, freq) in frequencies.enumerated() {
    let position = StaffPositionMapper.frequencyToStaffPosition(freq, context: context)
    let ledgerLines = StaffPositionMapper.getLedgerLinesCount(for: position)
    
    // Simulate detected note name
    let midiNote = 69 + 12 * log2(freq / 440.0)
    let noteNames = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
    let noteIndex = Int(round(midiNote)) % 12
    let octave = Int(round(midiNote)) / 12 - 1
    let detectedNote = "\(noteNames[noteIndex])\(octave)"
    
    print("  Detection \(i+1): \(String(format: "%.1f", freq)) Hz â†’ \(detectedNote)")
    print("    Staff position: \(String(format: "%+.1f", position)) (\(ledgerLines) ledger lines)")
}

print("\nðŸ“‹ EXAMPLE 5: Complete Bach Allemande Implementation")
print(repeatString("-", count: 50))

// Example 5: Bach Allemande using new system
let keySignature = "D minor"
let a4Reference = 440.0

let bachNotes = [
    Note.sixteenth("D4", a4Reference: a4Reference, keySignature: keySignature),
    Note.sixteenth("F4", a4Reference: a4Reference, keySignature: keySignature),
    Note.sixteenth("A4", a4Reference: a4Reference, keySignature: keySignature),
    Note.sixteenth("D5", a4Reference: a4Reference, keySignature: keySignature),
    Note.sixteenth("C5", a4Reference: a4Reference, keySignature: keySignature),
    Note.sixteenth("Bb4", a4Reference: a4Reference, keySignature: keySignature),
    Note.eighth("F4", a4Reference: a4Reference, keySignature: keySignature),
    Note.quarter("G4", a4Reference: a4Reference, keySignature: keySignature)
]

let bachTimedNotes = [
    TimedNote(note: bachNotes[0], startTime: 0.0),
    TimedNote(note: bachNotes[1], startTime: 0.125),
    TimedNote(note: bachNotes[2], startTime: 0.25),
    TimedNote(note: bachNotes[3], startTime: 0.375),
    TimedNote(note: bachNotes[4], startTime: 0.5),
    TimedNote(note: bachNotes[5], startTime: 0.625),
    TimedNote(note: bachNotes[6], startTime: 0.75),
    TimedNote(note: bachNotes[7], startTime: 1.0)
]

let bachAllemande = SheetMusic(
    title: "Allemande",
    composer: "J.S. Bach - Partita No. 2 in D minor, BWV 1004",
    keySignature: keySignature,
    clef: .treble,
    tempo: 120,
    timeSignature: "4/4",
    timedNotes: bachTimedNotes,
    a4Reference: a4Reference
)

print("Bach Allemande Analysis:")
print("Title: \(bachAllemande.title)")
print("Key: \(bachAllemande.musicContext.keySignature), Clef: \(bachAllemande.musicContext.clef.rawValue)")
print("Tempo: \(bachAllemande.musicContext.tempo) BPM, A4: \(bachAllemande.musicContext.a4Reference) Hz")
print("\nNote sequence:")

for (i, timedNote) in bachAllemande.timedNotes.enumerated() {
    let position = timedNote.staffPosition(in: bachAllemande.musicContext)
    let duration = timedNote.duration(in: bachAllemande.musicContext)
    let accidental = timedNote.accidentalDisplay(in: bachAllemande.musicContext)
    let freq = timedNote.note.frequency
    
    print("  \(i+1). \(timedNote.note.noteName)\(accidental) at \(String(format: "%.3f", timedNote.startTime))s")
    print("      Duration: \(String(format: "%.3f", duration))s, Frequency: \(String(format: "%.1f", freq)) Hz")
    print("      Staff position: \(String(format: "%+.1f", position))")
}

print("\nðŸ“‹ EXAMPLE 6: Multi-Instrument Orchestration")
print(repeatString("-", count: 50))

// Example 6: Different instruments with their appropriate clefs and ranges
struct Instrument {
    let name: String
    let clef: Clef
    let range: (low: String, high: String)
    let transposition: Double // Cents from concert pitch
}

let instruments = [
    Instrument(name: "Violin", clef: .treble, range: ("G3", "E7"), transposition: 0),
    Instrument(name: "Viola", clef: .alto, range: ("C3", "A6"), transposition: 0),
    Instrument(name: "Cello", clef: .bass, range: ("C2", "A5"), transposition: 0),
    Instrument(name: "Trumpet in Bb", clef: .treble, range: ("F#3", "C6"), transposition: -200), // Bb trumpet sounds a whole step lower
]

let testNote = "C4"
print("Same written note (\(testNote)) on different instruments:")

for instrument in instruments {
    // Calculate the concert pitch frequency with transposition
    let writtenNoteFreq = StaffPositionMapper.noteNameToMidiNote(testNote)
    let concertPitchCents = Double(writtenNoteFreq - 60) * 100 + instrument.transposition // C4 = 0 cents
    let concertFreq = 261.63 * pow(2.0, concertPitchCents / 1200.0) // C4 = 261.63 Hz
    
    let context = MusicContext(keySignature: "C major", clef: instrument.clef)
    let position = StaffPositionMapper.noteNameToStaffPosition(testNote, context: context)
    
    print("  \(instrument.name.padding(toLength: 15, withPad: " ", startingAt: 0)): \(testNote) in \(instrument.clef.rawValue) clef")
    print("    Written position: \(String(format: "%+.1f", position)), Concert pitch: \(String(format: "%.1f", concertFreq)) Hz")
}

print("\n" + repeatString("=", count: 60))
print("âœ… COMPREHENSIVE EXAMPLES COMPLETE")
print(repeatString("=", count: 60))

print("\nðŸŽ¯ System Capabilities Demonstrated:")
print("â€¢ Immutable Note class with proper data separation")
print("â€¢ Universal staff position mapping for any clef")
print("â€¢ Extended range support with automatic ledger line calculation")
print("â€¢ Frequency and note name bidirectional conversion")
print("â€¢ Multi-context musical compositions")
print("â€¢ Real-world instrument range compatibility")
print("â€¢ Transposing instrument support framework")
print("â€¢ Historical tuning system flexibility")

print("\nðŸš€ The robust mapping system is ready for production use!")
print("   All requirements have been successfully implemented.")